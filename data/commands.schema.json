{
	"$schema": "http://json-schema.org/draft-07/schema",

	"definitions": {

		"thisExtensionArgsTypes": {
			"allOf": [
				{ "$ref": "#/definitions/toggleSettingCommand" },
				{ "$ref": "#/definitions/incrementSettingCommand" },
				{ "$ref": "#/definitions/toggleThemeCommand" },
				{ "$ref": "#/definitions/openFolderCommand" },
				{ "$ref": "#/definitions/focusTerminalCommand" },
				{ "$ref": "#/definitions/runInTerminalCommand" },
				{ "$ref": "#/definitions/startDebuggingCommand" },
				{ "$ref": "#/definitions/setEditorLanguageCommand" },
				{ "$ref": "#/definitions/clipboardWriteCommand" },
				{ "$ref": "#/definitions/showNotificationCommand" },
				{ "$ref": "#/definitions/showStatusBarNotificationCommand" },
				{ "$ref": "#/definitions/openExternalCommand" },
				{ "$ref": "#/definitions/openCommand" },
				{ "$ref": "#/definitions/revealFileIsOSCommand" },
				{ "$ref": "#/definitions/diffCommand" },
				{ "$ref": "#/definitions/runCommand" }
			]
		},

		"argsTypes": {
			"allOf": [
				{ "$ref": "#/definitions/thisExtensionArgsTypes" },
				{ "$ref": "#/definitions/typeCommand" },
				{ "$ref": "#/definitions/runTaskCommand" },
				{ "$ref": "#/definitions/insertSnippetCommand" },
				{ "$ref": "#/definitions/sendSequenceCommand" },
				{ "$ref": "#/definitions/quickOpenCommand" },
				{ "$ref": "#/definitions/openSettingsCommand" },
				{ "$ref": "#/definitions/openGlobalKeybindingsCommand" },
				{ "$ref": "#/definitions/extensionsSearchCommand" },
				{ "$ref": "#/definitions/codeActionCommand" },
				{ "$ref": "#/definitions/findInFilesCommand" },
				{ "$ref": "#/definitions/findWithArgsCommand" },
				{ "$ref": "#/definitions/searchOpenNewEditorCommand" },
				{ "$ref": "#/definitions/cursorMoveCommand" },
				{ "$ref": "#/definitions/editorScrollCommand" },
				{ "$ref": "#/definitions/moveActiveEditorCommand" },
				{ "$ref": "#/definitions/setEditorLayoutCommand" },
				{ "$ref": "#/definitions/emmetWrapWithAbbreviationCommand" },
				{ "$ref": "#/definitions/openIssueReporterCommand" },
				{ "$ref": "#/definitions/installExtensionCommand" },
				{ "$ref": "#/definitions/uninstallExtensionCommand" },
				{ "$ref": "#/definitions/showExtensionswithIdCommand" }
			]
		},

		"layoutGroups": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"groups": {
						"$ref": "#/definitions/layoutGroups"
					},
					"size": {
						"type": "number",
						"markdownDescription": "If editor group sizes are provided, their sum must be 1 to be applied per row or column."
					}
				}
			}
		},

		"typeCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "type"
					}
				}
			},
			"then": {
				"properties": {
					"args": {
						"defaultSnippets": [{
							"body": {
								"text": "$1"
							}
						}],
						"type": "object",
						"required": [
							"text"
						],
						"properties": {
							"text": {
								"type": "string",
								"markdownDescription": "Text to type into the Active Text Editor."
							}
						},
						"additionalProperties": false
					}
				}
			}
		},

		"runTaskCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "workbench.action.tasks.runTask"
					}
				}
			},
			"then": {
				"properties": {
					"args": {
						"type": "string",
						"markdownDescription": "\"label\" of the task to run. https://github.com/usernamehw/vscode-commands#workbenchactiontasksruntask-run-task-by-its-label"
					}
				}
			}
		},

		"insertSnippetCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "editor.action.insertSnippet"
					}
				}
			},
			"then": {
				"properties": {
					"args": {
						"type": "object",
						"markdownDescription": "Insert snippet as text by using `\"snippet\"` property or insert existing by referencing it with `\"langId\"` & `\"name\"`.",
						"defaultSnippets": [{
							"body": {
								"snippet": "$1"
							}
						}],
						"properties": {
							"snippet": {
								"type": "string",
								"markdownDescription": "Insert [Snippet](https://code.visualstudio.com/docs/editor/userdefinedsnippets)."
							},
							"langId": {
								"type": "string"
							},
							"name": {
								"type": "string"
							}
						},
						"additionalProperties": false
					}
				}
			}
		},

		"sendSequenceCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "workbench.action.terminal.sendSequence"
					}
				}
			},
			"then": {
				"properties": {
					"args": {
						"type": "object",
						"markdownDescription": "Send a specific sequence of text to the terminal, including escape sequences that are interpreted specially by the shell.",
						"defaultSnippets": [{
							"body": {
								"text": "$1"
							}
						}],
						"required": [
							"text"
						],
						"properties": {
							"text": {
								"type": "string"
							}
						},
						"additionalProperties": false
					}
				}
			}
		},

		"quickOpenCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "workbench.action.quickOpen"
					}
				}
			},
			"then": {
				"properties": {
					"args": {
						"type": "string",
						"markdownDescription": "Open Command Palette with prefilled value."
					}
				}
			}
		},

		"openSettingsCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "workbench.action.openSettings"
					}
				}
			},
			"then": {
				"properties": {
					"args": {
						"type": "string",
						"markdownDescription": "Open Settings UI with prefilled input value."
					}
				}
			}
		},

		"openGlobalKeybindingsCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "workbench.action.openGlobalKeybindings"
					}
				}
			},
			"then": {
				"properties": {
					"args": {
						"type": "string",
						"markdownDescription": "Open Keybindings UI with prefilled input value."
					}
				}
			}
		},

		"extensionsSearchCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "workbench.extensions.search"
					}
				}
			},
			"then": {
				"properties": {
					"args": {
						"type": "string",
						"markdownDescription": "Open Extensions View with prefilled input value."
					}
				}
			}
		},

		"codeActionCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "editor.action.codeAction"
					}
				}
			},
			"then": {
				"properties": {
					"args": {
						"type": "object",
						"markdownDescription": "Execute code action. https://code.visualstudio.com/docs/editor/refactoring#_keybindings-for-code-actions",
						"defaultSnippets": [{
							"body": {
								"kind": "$1",
								"apply": "${2:first}"
							}
						}],
						"properties": {
							"kind": {
								"type": "string"
							},
							"apply": {
								"type": "string",
								"enum": [
									"first",
									"ifSingle",
									"never"
								]
							},
							"preferred": {
								"type": "boolean"
							}
						},
						"additionalProperties": false
					}
				}
			}
		},

		"findInFilesCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "workbench.action.findInFiles"
					}
				}
			},
			"then": {
				"properties": {
					"args": {
						"type": "object",
						"defaultSnippets": [{
							"body": {
								"query": "$1"
							}
						}],
						"properties": {
							"query": {
								"type": "string",
								"markdownDescription": "Main property. Defines what to search."
							},
							"replace": {
								"type": "string",
								"markdownDescription": "Defines with what to replace the searched string."
							},
							"filesToInclude": {
								"type": "string",
								"markdownDescription": "Files to include. [Glob](https://code.visualstudio.com/api/references/vscode-api#GlobPattern)."
							},
							"filesToExclude": {
								"type": "string",
								"markdownDescription": "Files to exclude. [Glob](https://code.visualstudio.com/api/references/vscode-api#GlobPattern)."
							},
							"isRegex": {
								"type": "boolean",
								"markdownDescription": "When true - will treat main property as Regular Expression."
							},
							"isCaseSensitive": {
								"type": "boolean",
								"markdownDescription": "When true - will search matching case."
							},
							"matchWholeWord": {
								"type": "boolean",
								"markdownDescription": "When true - will match only whole words."
							},
							"preserveCase": {
								"type": "boolean",
								"markdownDescription": "When true - will preserve case when doing replacement."
							},
							"excludeSettingAndIgnoreFiles": {
								"type": "boolean",
								"markdownDescription": "When true - will ignore files from `search.exclude` setting."
							},
							"triggerSearch": {
								"type": "boolean",
								"markdownDescription": "When true - will start searching immediately."
							},
							"onlyOpenEditors": {
								"type": "boolean",
								"markdownDescription": "When true - will only search in open editors."
							}
						},
						"additionalProperties": false
					}
				}
			}
		},

		"findWithArgsCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "editor.actions.findWithArgs"
					}
				}
			},
			"then": {
				"properties": {
					"args": {
						"type": "object",
						"defaultSnippets": [{
							"body": {
								"searchString": "$1"
							}
						}],
						"properties": {
							"searchString": {
								"type": "string",
								"markdownDescription": "Main property. Defines what to search."
							},
							"replaceString": {
								"type": "string",
								"markdownDescription": "Defines with what to replace the searched string."
							},
							"isRegex": {
								"type": "boolean",
								"markdownDescription": "When true - will treat main property as Regular Expression."
							},
							"isCaseSensitive": {
								"type": "boolean",
								"markdownDescription": "When true - will search matching case."
							},
							"matchWholeWord": {
								"type": "boolean",
								"markdownDescription": "When true - will match only whole words."
							},
							"preserveCase": {
								"type": "boolean",
								"markdownDescription": "When true - will preserve case when doing replacement."
							},
							"findInSelection": {
								"type": "boolean",
								"markdownDescription": "When true - will only search in selected text."
							}
						},
						"additionalProperties": false
					}
				}
			}
		},

		"searchOpenNewEditorCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "search.action.openNewEditor"
					}
				}
			},
			"then": {
				"properties": {
					"args": {
						"type": "object",
						"defaultSnippets": [{
							"body": {
								"query": "$1"
							}
						}],
						"properties": {
							"query": {
								"type": "string",
								"markdownDescription": "Main property. Defines what to search."
							},
							"filesToInclude": {
								"type": "string",
								"markdownDescription": "Files to include. [Glob](https://code.visualstudio.com/api/references/vscode-api#GlobPattern)."
							},
							"filesToExclude": {
								"type": "string",
								"markdownDescription": "Files to exclude. [Glob](https://code.visualstudio.com/api/references/vscode-api#GlobPattern)."
							},
							"contextLines": {
								"type": "integer",
								"markdownDescription": "Number of lines shown around matched lines."
							},
							"isRegexp": {
								"type": "boolean",
								"markdownDescription": "When true - will treat main property as Regular Expression."
							},
							"isCaseSensitive": {
								"type": "boolean",
								"markdownDescription": "When true - will search matching case."
							},
							"matchWholeWord": {
								"type": "boolean",
								"markdownDescription": "When true - will match only whole words."
							},
							"preserveCase": {
								"type": "boolean",
								"markdownDescription": "When true - will preserve case when doing replacement."
							},
							"excludeSettingAndIgnoreFiles": {
								"type": "boolean",
								"markdownDescription": "When true - will ignore files from `search.exclude` setting."
							},
							"triggerSearch": {
								"type": "boolean",
								"markdownDescription": "When true - will start searching immediately."
							},
							"showIncludesExcludes": {
								"type": "boolean",
								"markdownDescription": "When true - will show includes/exludes inputs."
							}
						},
						"additionalProperties": false
					}
				}
			}
		},

		"cursorMoveCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "cursorMove"
					}
				}
			},
			"then": {
				"properties": {
					"args": {
						"type": "object",
						"markdownDescription": "Move cursor to a logical position in the view",
						"defaultSnippets": [{
							"body": {
								"to": "${1:down}",
								"by": "${2:line}",
								"value": 1
							}
						}],
						"required": [
							"to"
						],
						"properties": {
							"to": {
								"type": "string",
								"markdownDescription": "Where to move the cursor",
								"enum": [
									"left", "right", "up", "down", "prevBlankLine","nextBlankLine", "wrappedLineStart", "wrappedLineEnd", "wrappedLineColumnCenter", "wrappedLineFirstNonWhitespaceCharacter", "wrappedLineLastNonWhitespaceCharacter", "viewPortTop", "viewPortCenter", "viewPortBottom", "viewPortIfOutside"
								]
							},
							"by": {
								"type": "string",
								"markdownDescription": "Unit to move.",
								"enum": [
									"line",
									"wrappedLine",
									"character",
									"halfLine"
								]
							},
							"value": {
								"type": "integer",
								"markdownDescription": "Number of units to move.",
								"default": 1
							},
							"select": {
								"type": "boolean",
								"markdownDescription": "If 'true' makes the selection.",
								"default": false
							}
						},
						"additionalProperties": false
					}
				}
			}
		},

		"editorScrollCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "editorScroll"
					}
				}
			},
			"then": {
				"properties": {
					"args": {
						"type": "object",
						"markdownDescription": "Scroll editor in the given direction.",
						"defaultSnippets": [{
							"body": {
								"to": "${1:down}",
								"by": "${2:line}",
								"value": 1
							}
						}],
						"required": [
							"to"
						],
						"properties": {
							"to": {
								"type": "string",
								"markdownDescription": "A mandatory direction value.",
								"enum": [
									"up",
									"down"
								]
							},
							"by": {
								"type": "string",
								"markdownDescription": "Unit to move.",
								"enum": [
									"line",
									"wrappedLine",
									"page",
									"halfPage"
								]
							},
							"value": {
								"type": "integer",
								"markdownDescription": "Number of units to move.",
								"default": 1
							},
							"revealCursor": {
								"type": "boolean",
								"markdownDescription": "If 'true' reveals the cursor when it is outside view port.",
								"default": true
							}
						},
						"additionalProperties": false
					}
				}
			}
		},

		"moveActiveEditorCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "moveActiveEditor"
					}
				}
			},
			"then": {
				"properties": {
					"args": {
						"type": "object",
						"markdownDescription": "Move the active editor by tabs or groups.",
						"defaultSnippets": [{
							"body": {
								"to": "${1:down}",
								"by": "${2:tab}",
								"value": 1
							}
						}],
						"properties": {
							"to": {
								"type": "string",
								"markdownDescription": "String value providing where to move.",
								"enum": [
									"left",
									"right"
								]
							},
							"by": {
								"type": "string",
								"markdownDescription": "String value providing the unit for move.",
								"enum": [
									"tab",
									"group"
								]
							},
							"value": {
								"type": "integer",
								"markdownDescription": "Number value providing how many positions or an absolute position to move",
								"default": 1
							}
						},
						"additionalProperties": false
					}
				}
			}
		},

		"setEditorLayoutCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "vscode.setEditorLayout"
					}
				}
			},
			"then": {
				"properties": {
					"args": {
						"type": "object",
						"markdownDescription": "Sets the editor layout",
						"default": {
							"orientation": 0,
							"groups": [{
								"groups": [{}, {}],
								"size": 0.5
						   },
						   {
							   "groups": [{}, {}],
							   "size": 0.5
						   }]
					   },
						"properties": {
							"orientation": {
								"type": "number",
								"enum": [
									0,
									1
								],
								"markdownEnumDescriptions": [
									"Horizontal",
									"Vertical"
								]
							},
							"groups": {
								"$ref": "#/definitions/layoutGroups"
							}
						},
						"additionalProperties": false
					}
				}
			}
		},

		"emmetWrapWithAbbreviationCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "editor.emmet.action.wrapWithAbbreviation"
					}
				}
			},
			"then": {
				"properties": {
					"args": {
						"type": "object",
						"markdownDescription": "Wrap text with emmet.",
						"defaultSnippets": [{
							"body": {
								"abbreviation": "$1",
								"language": "$2"
							}
						}],
						"properties": {
							"abbreviation": {
								"type": "string"
							},
							"language": {
								"type": "string"
							}
						},
						"additionalProperties": false
					}
				}
			}
		},

		"openIssueReporterCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "vscode.openIssueReporter"
					}
				}
			},
			"then": {
				"properties": {
					"args": {
						"oneOf": [
							{
								"type": "string"
							},
							{
								"type": "object",
								"properties": {
									"extensionId": {
										"type": "string"
									},
									"issueTitle": {
										"type": "string"
									},
									"issueBody": {
										"type": "string"
									}
								}
							}
						],
						"markdownDescription": "Opens the issue reporter with the provided extension id as the selected source",
						"type": "string"
					}
				}
			}
		},

		"installExtensionCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "workbench.extensions.installExtension"
					}
				}
			},
			"then": {
				"properties": {
					"args": {
						"markdownDescription": "Install extension by id.",
						"type": "string"
					}
				}
			}
		},

		"uninstallExtensionCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "workbench.extensions.uninstallExtension"
					}
				}
			},
			"then": {
				"properties": {
					"args": {
						"markdownDescription": "Uninstall extension by id.",
						"type": "string"
					}
				}
			}
		},

		"showExtensionswithIdCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "workbench.extensions.action.showExtensionsWithIds"
					}
				}
			},
			"then": {
				"properties": {
					"args": {
						"markdownDescription": "Show extensions in Extensions View by id.",
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			}
		},






		"toggleSettingCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "commands.toggleSetting"
					}
				},
				"required": ["command"]
			},
			"then": {
				"properties": {
					"args": {
						"oneOf": [
							{
								"type": "string"
							},
							{
								"type": "object",
								"required": [
									"setting"
								],
								"properties": {
									"setting": {
										"type": "string",
										"markdownDescription": "Setting id.",
										"$ref": "commandsExtension://schemas/settings"
									},
									"target": {
										"type": "string",
										"enum": [
											"global",
											"workspace"
										]
									},
									"value": {
										"markdownDescription": "An array of values or a string of values separated by comma `,`.",
										"default": []
									},
									"showNotification": {
										"type": "boolean",
										"markdownDescription": "Show notification with the new value of the setting. Overrides global setting `commands.toggleSettings.showNotification`."
									}
								},
								"additionalProperties": false
							}
						],
						"defaultSnippets": [{
							"body": {
								"setting": "$1",
								"value": ["$2"]
							}
						}]
					}
				},
				"required": ["args"]
			}
		},

		"incrementSettingCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "commands.incrementSetting"
					}
				},
				"required": ["command"]
			},
			"then": {
				"properties": {
					"args": {
						"type": "object",
						"markdownDescription": "Increment or decrement a setting.",
						"required": [
							"setting"
						],
						"properties": {
							"setting": {
								"type": "string",
								"markdownDescription": "Setting id.",
								"$ref": "commandsExtension://schemas/settings"
							},
							"target": {
								"type": "string",
								"enum": [
									"global",
									"workspace"
								]
							},
							"value": {
								"type": "number",
								"markdownDescription": "Positive values will increment setting, negative - decrement.",
								"default": 1
							},
							"showNotification": {
								"type": "boolean",
								"markdownDescription": "Show notification with the new value of the setting. Overrides global setting `commands.toggleSettings.showNotification`."
							}
						},
						"additionalProperties": false
					}
				},
				"required": ["args"]
			}
		},

		"toggleThemeCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "commands.toggleTheme"
					}
				},
				"required": ["command"]
			},
			"then": {
				"properties": {
					"args": {
						"type": "object",
						"markdownDescription": "Toggle themes by groups (depending on active theme kind)",
						"defaultSnippets": [{
							"body": {
								"dark": "$1",
								"light": "$2"
							}
						}],
						"properties": {
							"dark": {
								"type": "string",
								"markdownDescription": "Dark theme id, separated by comma `,`."
							},
							"light": {
								"type": "string",
								"markdownDescription": "Light theme id, separated by comma `,`."
							}
						},
						"additionalProperties": false
					}
				},
				"required": ["args"]
			}
		},

		"openFolderCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "commands.openFolder"
					}
				},
				"required": ["command"]
			},
			"then": {
				"properties": {
					"args": {
						"oneOf": [
							{
								"type": "string"
							},
							{
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						],
						"markdownDescription": "Open file/folder in vscode. Relative path will open relative to the first opened workspace folder."
					}
				},
				"required": ["args"]
			}
		},

		"focusTerminalCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "commands.focusTerminal"
					}
				}
			},
			"then": {
				"properties": {
					"args": {
						"oneOf": [
							{
								"type": "string",
								"markdownDescription": "A name to match against.  \n_If omitted, focuses newest non-task terminal._  \n_If no match, creates new terminal with given name._"
							},
							{
								"type": "object",
								"properties": {
									"name": {
										"type": "string",
										"markdownDescription": "A name to match against (or to assign if creating a new terminal)."
									},
									"icon": {
										"$ref": "commandsExtension://schemas/codicons",
										"markdownDescription": "A codicon ID to assign to the icon (if creating a new terminal)."
									},
									"iconColor": {
										"$ref": "commandsExtension://schemas/colors",
										"markdownDescription": "A theme color ID to assign to the icon (if creating a new terminal)."
									},
									"cwd": {
										"type": "string",
										"markdownDescription": "Specify the current working directory (if creating a new terminal)."
									},
									"target": {
										"type": "string",
										"enum": [
											"newest",
											"oldest",
											"create new"
										],
										"default": "newest",
										"markdownEnumDescriptions": [
											"Will focus newest terminal with same \"name\".  \n_If \"name\" property omitted, focuses newest non-task terminal._",
											"Will focus oldest terminal with same \"name\".  \n_If \"name\" property omitted, focuses oldest non-task terminal._",
											"Will create a new terminal."
										],
										"markdownDescription": "Specify which terminal to focus.  \n_Creates new if no match._"
									}
								},
								"additionalProperties": false
							}
						],
						"defaultSnippets": [{
							"body": {
								"name": "$1",
								"target": "${2:newest}"
							}
						}]
					}
				}
			}
		},

		"runInTerminalCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "commands.runInTerminal"
					}
				},
				"required": ["command"]
			},
			"then": {
				"properties": {
					"args": {
						"oneOf": [
							{
								"type": "string",
								"markdownDescription": "Text to be sent to a new terminal."
							},
							{
								"type": "object",
								"properties": {
									"text": {
										"type": "string",
										"markdownDescription": "Text to be sent to the terminal."
									},
									"name": {
										"type": "string",
										"markdownDescription": "A name to assign to the terminal.  \n_Used as a match criteria if property \"reuse\" also specified._"
									},
									"icon": {
										"$ref": "commandsExtension://schemas/codicons",
										"markdownDescription": "A codicon ID to assign to the icon (if creating a new terminal)."
									},
									"iconColor": {
										"$ref": "commandsExtension://schemas/colors",
										"markdownDescription": "A theme color ID to assign to the icon (if creating a new terminal)."
									},
									"cwd": {
										"type": "string",
										"markdownDescription": "Specify the current working directory (if creating a new terminal)."
									},
									"reveal": {
										"type": "boolean",
										"markdownDescription": "Whether to reveal & focus the terminal."
									},
									"waitForExit": {
										"type": "boolean",
										"markdownDescription": "Will wait for the terminal to exit before running next command."
									},
									"reuse": {
										"type": "string",
										"enum": [
											"newest",
											"oldest"
										],
										"markdownEnumDescriptions": [
											"Will reuse newest terminal with same \"name\".  \n_If \"name\" property omitted, reuses newest non-task terminal._",
											"Will reuse oldest terminal with same \"name\".  \n_If \"name\" property omitted, reuses oldest non-task terminal._"
										],
										"markdownDescription": "Run \"text\" within an existing terminal.  \n_Will create new if omitted or no match._"
									}
								},
								"additionalProperties": false
							}
						],
						"defaultSnippets": [{
							"body": {
								"name": "$1",
								"text": "$2",
								"reveal": true
							}
						}]
					}
				},
				"required": ["args"]
			}
		},

		"startDebuggingCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "commands.startDebugging"
					}
				},
				"required": ["command"]
			},
			"then": {
				"properties": {
					"args": {
						"markdownDescription": "Start debugging by \"name\" property from `launch.json`.",
						"type": "string"
					}
				},
				"required": ["args"]
			}
		},

		"setEditorLanguageCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "commands.setEditorLanguage"
					}
				},
				"required": ["command"]
			},
			"then": {
				"properties": {
					"args": {
						"type": "string",
						"markdownDescription": "Set editor by [Language Id](https://code.visualstudio.com/docs/languages/identifiers#_known-language-identifiers)."
					}
				},
				"required": ["args"]
			}
		},

		"clipboardWriteCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "commands.clipboardWrite"
					}
				},
				"required": ["command"]
			},
			"then": {
				"properties": {
					"args": {
						"type": "string",
						"markdownDescription": "Write text into clipboard."
					}
				},
				"required": ["args"]
			}
		},

		"showNotificationCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "commands.showNotification"
					}
				},
				"required": ["command"]
			},
			"then": {
				"properties": {
					"args": {
						"markdownDescription": "Show standard VSCode notification.",
						"oneOf": [
							{
								"type": "string"
							},
							{
								"type": "object",
								"properties": {
									"message": {
										"type": "string",
										"markdownDescription": "Message to show in notification."
									},
									"severity": {
										"type": "string",
										"markdownDescription": "Notification style (error/warning/info).",
										"enum": [
											"error",
											"warning",
											"info"
										]
									},
									"modal": {
										"type": "boolean",
										"markdownDescription": "Show message as a modal dialog.",
										"default": false
									}
								},
								"additionalProperties": false
							}
						],
						"defaultSnippets": [{
							"body": {
								"message": "$1",
								"severity": "${2:info}"
							}
						}]
					}
				},
				"required": ["args"]
			}
		},

		"showStatusBarNotificationCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "commands.showStatusBarNotification"
					}
				},
				"required": ["command"]
			},
			"then": {
				"properties": {
					"args": {
						"markdownDescription": "Show notification in Status Bar.",
						"oneOf": [
							{
								"type": "string"
							},
							{
								"type": "object",
								"properties": {
									"message": {
										"type": "string",
										"markdownDescription": "Message to show in Status Bar."
									},
									"color": {
										"type": "string",
										"markdownDescription": "Color of the text.",
										"format": "color"
									},
									"timeout": {
										"type": "integer",
										"markdownDescription": "Duration of notification (ms) before hiding.",
										"default": 5000
									}
								},
								"additionalProperties": false
							}
						],
						"defaultSnippets": [{
							"body": {
								"message": "$1"
							}
						}]
					}
				},
				"required": ["args"]
			}
		},

		"openExternalCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "commands.openExternal"
					}
				},
				"required": ["command"]
			},
			"then": {
				"properties": {
					"args": {
						"oneOf": [
							{
								"type": "string"
							},
							{
								"type": "array",
								"items": {
									"type": "string"
								}
							}
						],
						"markdownDescription": "Open link in default browser or open other things from registered protocols, like `mailto:`,`callto:`..."
					}
				},
				"required": ["args"]
			}
		},

		"openCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "commands.open"
					}
				},
				"required": ["command"]
			},
			"then": {
				"properties": {
					"args": {
						"markdownDescription": "Open file in default/chosen app.",
						"oneOf": [
							{
								"type": "string"
							},
							{
								"type": "object",
								"properties": {
									"target": {
										"type": "string",
										"markdownDescription": "Absolute file path."
									},
									"app": {
										"type": "string",
										"markdownDescription": "App as it is registered like: `code`/`firefox` or an absolute path."
									},
									"arguments": {
										"type": "array",
										"markdownDescription": "List of arguments provided when running the app.",
										"items": {
											"type": "string"
										}
									}
								},
								"additionalProperties": false
							}
						]
					}
				},
				"required": ["args"]
			}
		},

		"diffCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "commands.diff"
					}
				},
				"required": ["command"]
			},
			"then": {
				"properties": {
					"args": {
						"type": "object",
						"markdownDescription": "Diff visible/open text editors.",
						"properties": {
							"kind": {
								"type": "string",
								"enum": [
									"openEditors",
									"visibleEditors"
								],
								"enumDescriptions": [
									"First 2 opened text editors.",
									"First 2 visible text editors."
								]
							},
							"title": {
								"type": "string",
								"markdownDescription": "Title of the diff tab."
							},
							"columnOptions": {
								"type": "object",
								"markdownDescription": "Where to show the diff.",
								"properties": {
									"viewColumn": {
										"type": "integer",
										"enum": [
											-1,
											-2,
											1,
											2,
											3,
											4,
											5,
											6,
											7,
											8,
											9
										],
										"markdownEnumDescriptions": [
											"Active. A *symbolic* editor column representing the currently active column.",
											"Beside. A *symbolic* editor column representing the column to the side of the active one.",
											"The first editor column.",
											"The second editor column.",
											"The third editor column."
										]
									},
									"preserveFocus": {
										"type": "boolean",
										"markdownDescription": "An optional flag that when `true` will stop the TextEditor from taking focus."
									},
									"preview": {
										"type": "boolean",
										"markdownDescription": "An optional flag that controls if an TextEditor-tab shows as preview. Preview tabs will be replaced and reused until set to stay - either explicitly or through editing."
									}
								}
							}
						},
						"additionalProperties": false
					}
				},
				"required": ["args"]
			}
		},

		"revealFileIsOSCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "commands.revealFileInOS"
					}
				},
				"required": ["command"]
			},
			"then": {
				"properties": {
					"args": {
						"type": "string",
						"markdownDescription": "Open system file explorer at the specified path."
					}
				},
				"required": ["args"]
			}
		},

		"runCommand": {
			"if": {
				"properties": {
					"command": {
						"const": "commands.run"
					}
				},
				"required": ["command"]
			},
			"then": {
				"properties": {
					"args": {
						"type": "array",
						"markdownDescription": "Run multiple commands in sequence.",
						"items": {
							"oneOf": [
								{
									"type": "string"
								},
								{
									"type": "object",
									"required": [
										"command"
									],
									"properties": {
										"command": {
											"type": "string",
											"markdownDescription": "Command id to execute."
										},
										"args": {
											"markdownDescription": "Arguments for this command."
										},
										"delay": {
											"type": "number",
											"markdownDescription": "Delay (ms) BEFORE executing this command."
										},
										"repeat": {
											"type": "integer",
											"markdownDescription": "Run this command or sequence this number of times.",
											"minimum": 1
										}
									},
									"additionalProperties": false
								}
							],
							"defaultSnippets": [{
								"body": {
									"command": "$1",
									"args": "$2"
								}
							}]
						},
						"defaultSnippets": [
							{
								"body": [
									{
										"command": "$1",
										"args": "$2"
									}
								]
							}
						]
					}
				},
				"required": ["args"]
			}
		}

	}
}